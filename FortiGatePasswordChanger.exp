#!/usr/bin/expect -f

# Script to change the password on a Fortinet device
# --------------------------------------------------
# Created: 18/03/2022 -LS-
# Updated: 07/10/2023 -LS-

# Requirements:
# - You must have a super_admin user with SSH access to the Fortinet device.
# (how to add shh key to fortinet - see at the bottom [1])
# - SSH key authentication should be set up for passwordless login.
# - The user whose password you want to change must already exist on the device.

# Log File
set logPath "/tmp/fortigate_password_changer.log"
log_file -a $logPath

# Clear the log file at the start of the script
exec echo -n > $logPath

# Usage:
# Syntax: FortiGatePasswordChanger <admin_username> <target_username> <new_password> <device_IP> [<hostname> (optional)]
# Example: ./FortiGatePasswordChanger.exp admin admin_user new_password 192.168.1.1

# DEBUG mode: 1=enabled, 0=disabled
set debug 0

# Check the number of arguments
if { $argc < 4 || $argc > 5 } {
    puts "Usage: FortiGatePasswordChanger <admin_username> <target_username> <new_password> <device_IP> [<hostname> (optional)]"
    exit 1
}

set admin_user [lindex $argv 0]
set target_username [lindex $argv 1]
set new_password [lindex $argv 2]
set device_IP [lindex $argv 3]

# Set HOSTNAME to an empty string if not specified
if {$argc == 4} {
    set HOSTNAME ""
} else {
    set HOSTNAME [lindex $argv 4]
}

# Configure timeout and match buffer size
set timeout 20
match_max 10000

# Start a new SSH session to the Fortinet device
spawn ssh $admin_user@$device_IP

# Expect the command prompt or handle errors
expect {
    -re "(.*) # " {
        if {$HOSTNAME eq ""} {
            set HOSTNAME $expect_out(1,string)
        }
    }
    timeout {
        send_log "####ERROR: Timeout while attempting SSH connection to $device_IP.\n"
        exit 1
    }
    "Permission denied" {
        send_log "####ERROR: Permission denied during SSH connection to $device_IP.\n"
        exit 1
    }
    -re ".*Connection timed out" {
        send_log "####ERROR: SSH connection to $device_IP timed out.\n"
        exit 1
    }
    eof {
        send_log "####ERROR: Connection closed during SSH connection to $device_IP.\n"
        exit 1
    }
}

# Log the action
send_log "\r\n"
send_log "####Changing password on '$HOSTNAME' ($device_IP) for user '$target_username'\r\n"

# Debug: Print HOSTNAME if debug mode is active
if {$debug == 1} {
    puts "\nHOSTNAME: $HOSTNAME\n"
}

# Disable output to the screen
log_user 0

# Check if the FortiGate has VDOM configured
send -- "get system status\r"
expect {
    -re "$HOSTNAME #" {}
}

set output $expect_out(buffer)

# Extract the VDOM configuration status
if {[regexp {Virtual domain configuration:\s+(\w+)} $output match vdomStatus]} {
    send_log "####VDOM status: $vdomStatus\n"
    if {[string match -nocase "multiple" $vdomStatus]} {
        # Enter global configuration if VDOM is enabled
        send -- "config global\r"
        expect -re "$HOSTNAME \\(global\\) #"
        send_log "####Entered global configuration as VDOM is enabled.\n"
        set inGlobal 1
    } else {
        # Proceed without entering global configuration
        send_log "####VDOM not enabled, proceeding without global configuration.\n"
        set inGlobal 0
    }
} else {
    send_log "####ERROR: Unable to determine VDOM status.\n"
    exit 1
}

# Re-enable output to the screen
log_user 1

# Access system admin configuration
send -- "config system admin\r"
expect {
    -re "$HOSTNAME( \\(global\\))? \\(admin\\) #" {
        send_log "####Accessed 'config system admin' successfully.\n"
    }
    -re ".*Command fail. Return code (.*)" {
        send_log "####ERROR: $expect_out(0,string)\n"
        exit 1
    }
}

# Select the target user
send -- "edit $target_username\r"
expect {
    -re "$HOSTNAME( \\(global\\))? \\($target_username\\) #" {
        send_log "####User '$target_username' selected successfully.\n"
    }
    -re ".*Command fail. Return code (.*)" {
        send_log "####ERROR: $expect_out(0,string)\n"
        exit 1
    }
}

# Change the user's password
send -- "set password $new_password\r"
expect {
    -re "$HOSTNAME( \\(global\\))? \\($target_username\\) #" {
        send_log "####Password for user '$target_username' changed successfully on '$HOSTNAME' ($device_IP).\n"
    }
    -re ".*Command fail. Return code (.*)" {
        send_log "####ERROR: $expect_out(0,string)\n"
        exit 1
    }
}

# Exit system admin configuration
send -- "end\r"
expect {
    -re "$HOSTNAME( \\(global\\))? #" {
        send_log "####Exited system admin configuration successfully.\n"
    }
    default {
        send_log "####ERROR: Unable to exit system admin configuration.\n"
        exit 1
    }
}

# If in global configuration, exit
if {$inGlobal == 1} {
    send -- "end\r"
    expect {
        -re "$HOSTNAME #" {
            send_log "####Exited global configuration successfully.\n"
        }
        default {
            send_log "####ERROR: Unable to exit global configuration.\n"
            exit 1
        }
    }
}

# Exit the SSH session
send -- "exit\r"

# Wait for the session to end
expect eof
send_log "####Exited SSH session successfully.\n"

# Clean up the log file, keeping only lines starting with '####'
exec sed -i -e {/####/!d} -e {s/^.*####//} $logPath

# Print a confirmation message
puts "The password for user '$target_username' has been changed successfully on '$HOSTNAME' ($device_IP)."



#Add the key to the FortiGate:
#
#    config system admin
#        edit <admin>
#            set ssh-public-key1 "<key_type> <key_value>"
#        next
#    end
